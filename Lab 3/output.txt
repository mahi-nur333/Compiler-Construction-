int -> KEYWORD (int)
main -> IDENTIFIER
( -> PAREN (open)
) -> PAREN (close)
{ -> BRACE (open)
float -> KEYWORD (float)
b -> IDENTIFIER
= -> OPERATOR (assignment)
2.5 -> FLOAT CONSTANT
; -> SEMICOLON
Int -> KEYWORD (int - incorrect case!)
a -> IDENTIFIER
= -> OPERATOR (assignment)
10 -> EXPONENTIAL CONSTANT
; -> SEMICOLON
char -> KEYWORD (char)
c -> IDENTIFIER
= -> OPERATOR (assignment)
'a' -> CHARACTER
' ' -> ca
; -> SEMICOLON
Int -> KEYWORD (int - incorrect case!)
aq -> IDENTIFIER
; -> SEMICOLON
double -> KEYWORD (double)
exp -> IDENTIFIER
= -> OPERATOR (assignment)
-10 -> EXPONENTIAL CONSTANT
. -> poniter
9e-27 -> EXPONENTIAL CONSTANT
; -> SEMICOLON
for -> LOOP (for)
( -> PAREN (open)
int -> KEYWORD (int)
i -> IDENTIFIER
= -> OPERATOR (assignment)
0 -> EXPONENTIAL CONSTANT
; -> SEMICOLON
i -> IDENTIFIER
<= -> OPERATOR (less than or equal)
10 -> EXPONENTIAL CONSTANT
; -> SEMICOLON
i -> IDENTIFIER
++ -> OPERATOR (increment)
) -> PAREN (close)
{ -> BRACE (open)
printf -> FUNCTION (printf)
( -> PAREN (open)
"The Number is : %d" -> STRING
, -> COMMA
i -> IDENTIFIER
) -> PAREN (close)
; -> SEMICOLON
scanf -> FUNCTION (scanf)
( -> PAREN (open)
"%d" -> STRING
, -> COMMA
& -> OPERATOR (address-of)
aq -> IDENTIFIER
) -> PAREN (close)
; -> SEMICOLON
} -> BRACE (close)
return -> KEYWORD (return)
0 -> EXPONENTIAL CONSTANT
; -> SEMICOLON
} -> BRACE (close)
